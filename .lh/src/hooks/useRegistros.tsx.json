{
    "sourceFile": "src/hooks/useRegistros.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757096381454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757096381454,
            "name": "Commit-0",
            "content": "import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from '@/hooks/use-toast';\n\nexport interface ItemServico {\n  id?: string;\n  servico_id: string;\n  id_documento: string;\n  qtd_fiscais: number;\n  quantidade?: number;\n  pontuacao_calculada: number;\n  observacoes?: string;\n  servico?: {\n    descricao: string;\n    pontuacao_base: number;\n  } | null;\n}\n\nexport interface RegistroProdutividade {\n  id?: string;\n  numero_registro?: number;\n  competencia: string;\n  data_criacao?: string;\n  total_pontos: number;\n  situacao: string;\n  anotacoes?: string;\n  itens_servico?: ItemServico[];\n}\n\nexport function useRegistros(filters?: { mes?: string; ano?: string }) {\n  return useQuery({\n    queryKey: ['registros', filters],\n    queryFn: async () => {\n      let query = supabase\n        .from('registros_produtividade')\n        .select(`\n          *,\n          itens_servico (\n            *,\n            servico:servicos (\n              descricao,\n              pontuacao_base\n            )\n          )\n        `)\n        .eq('situacao', 'ativo')\n        .order('data_criacao', { ascending: false });\n\n      if (filters?.mes && filters?.mes !== 'all' && filters?.ano) {\n        const competencia = `${filters.mes.padStart(2, '0')}/${filters.ano}`;\n        query = query.eq('competencia', competencia);\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n      return data || [];\n    },\n  });\n}\n\nexport function useCreateRegistro() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (registro: RegistroProdutividade & { itens: ItemServico[] }) => {\n      // Obter user_id atual\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('Usuário não autenticado');\n\n      // Verificar se o perfil existe, se não criar um\n      const { data: existingProfile } = await supabase\n        .from('profiles')\n        .select('user_id')\n        .eq('user_id', user.id)\n        .single();\n\n      if (!existingProfile) {\n        const { error: profileError } = await supabase\n          .from('profiles')\n          .insert({\n            user_id: user.id,\n            nome: user.user_metadata?.nome || user.email || 'Usuário',\n            login: user.email || '',\n            matricula: user.user_metadata?.matricula || null,\n          });\n        \n        if (profileError) throw profileError;\n      }\n\n      // Criar registro\n      const { data: registroData, error: registroError } = await supabase\n        .from('registros_produtividade')\n        .insert({\n          user_id: user.id,\n          competencia: registro.competencia,\n          total_pontos: registro.total_pontos,\n          anotacoes: registro.anotacoes,\n        })\n        .select()\n        .single();\n\n      if (registroError) throw registroError;\n\n      // Criar itens de serviço\n      const itensWithRegistroId = registro.itens.map(item => ({\n        ...item,\n        registro_id: registroData.id,\n      }));\n\n      const { error: itensError } = await supabase\n        .from('itens_servico')\n        .insert(itensWithRegistroId);\n\n      if (itensError) throw itensError;\n\n      return registroData;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['registros'] });\n      toast({\n        title: \"PRT criada com sucesso!\",\n        description: \"Registro de produtividade salvo.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao criar PRT\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useUpdateRegistro() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ \n      id, \n      registro, \n      itens \n    }: { \n      id: string; \n      registro: RegistroProdutividade; \n      itens: ItemServico[] \n    }) => {\n      // Atualizar registro\n      const { error: registroError } = await supabase\n        .from('registros_produtividade')\n        .update({\n          competencia: registro.competencia,\n          total_pontos: registro.total_pontos,\n          anotacoes: registro.anotacoes,\n        })\n        .eq('id', id);\n\n      if (registroError) throw registroError;\n\n      // Deletar itens existentes\n      const { error: deleteError } = await supabase\n        .from('itens_servico')\n        .delete()\n        .eq('registro_id', id);\n\n      if (deleteError) throw deleteError;\n\n      // Inserir novos itens\n      const itensWithRegistroId = itens.map(item => ({\n        ...item,\n        registro_id: id,\n        id: undefined, // Remove ID para inserção\n      }));\n\n      const { error: itensError } = await supabase\n        .from('itens_servico')\n        .insert(itensWithRegistroId);\n\n      if (itensError) throw itensError;\n\n      return { id };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['registros'] });\n      toast({\n        title: \"PRT atualizada com sucesso!\",\n        description: \"Registro de produtividade atualizado.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao atualizar PRT\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useDeleteRegistro() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const { error } = await supabase\n        .from('registros_produtividade')\n        .update({ situacao: 'excluido' })\n        .eq('id', id);\n\n      if (error) throw error;\n      return id;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['registros'] });\n      toast({\n        title: \"PRT excluída com sucesso!\",\n        description: \"Registro de produtividade removido.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao excluir PRT\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}"
        }
    ]
}