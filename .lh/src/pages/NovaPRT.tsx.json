{
    "sourceFile": "src/pages/NovaPRT.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1757095833899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757096041411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,10 +180,10 @@\n             <CardTitle>Adicionar Serviço</CardTitle>\n             <CardDescription>Complete os campos abaixo para adicionar um item de serviço</CardDescription>\n           </CardHeader>\n           <CardContent className=\"space-y-4\">\n-            <div className=\"grid grid-cols-1 md:grid-cols-12 gap-4\">\n-              <div className=\"md:col-span-5\">\n+            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-12 gap-4\">\n+              <div className=\"sm:col-span-2 lg:col-span-5\">\n                 <Label>Tipo de Serviço *</Label>\n                 <Select value={novoItem.servico_id} onValueChange={handleServicoChange}>\n                   <SelectTrigger>\n                     <SelectValue placeholder=\"Selecione o serviço\" />\n@@ -197,9 +197,9 @@\n                   </SelectContent>\n                 </Select>\n               </div>\n \n-              <div className=\"md:col-span-3\">\n+              <div className=\"sm:col-span-2 lg:col-span-3\">\n                 <Label htmlFor=\"id_documento\">ID Documento *</Label>\n                 <Input\n                   id=\"id_documento\"\n                   value={novoItem.id_documento}\n@@ -207,9 +207,9 @@\n                   placeholder=\"ID do documento\"\n                 />\n               </div>\n \n-              <div className=\"md:col-span-2\">\n+              <div className=\"sm:col-span-1 lg:col-span-2\">\n                 <Label htmlFor=\"qtd_fiscais\">Qtd. Fiscais *</Label>\n                 <Input\n                   id=\"qtd_fiscais\"\n                   type=\"number\"\n@@ -218,9 +218,9 @@\n                   onChange={(e) => handleQtdFiscaisChange(Number(e.target.value))}\n                 />\n               </div>\n \n-              <div className=\"md:col-span-2\">\n+              <div className=\"sm:col-span-1 lg:col-span-2\">\n                 <Label htmlFor=\"quantidade\">Quantidade</Label>\n                 <Input\n                   id=\"quantidade\"\n                   type=\"number\"\n"
                },
                {
                    "date": 1757096236551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { Textarea } from '@/components/ui/textarea';\n import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n-import { Trash2, Plus } from 'lucide-react';\n+import { Trash2, Plus, Edit, Check, X } from 'lucide-react';\n import { useServicos } from '@/hooks/useServicos';\n import { useCreateRegistro, ItemServico } from '@/hooks/useRegistros';\n \n interface FormItem {\n@@ -25,8 +25,9 @@\n   const navigate = useNavigate();\n   const [competencia, setCompetencia] = useState('');\n   const [anotacoes, setAnotacoes] = useState('');\n   const [itens, setItens] = useState<FormItem[]>([]);\n+  const [editingItem, setEditingItem] = useState<string | null>(null);\n   const [novoItem, setNovoItem] = useState<FormItem>({\n     tempId: '',\n     servico_id: '',\n     id_documento: '',\n@@ -97,8 +98,38 @@\n   const removerItem = (tempId: string) => {\n     setItens(prev => prev.filter(item => item.tempId !== tempId));\n   };\n \n+  const iniciarEdicao = (item: FormItem) => {\n+    setEditingItem(item.tempId);\n+    setNovoItem(item);\n+  };\n+\n+  const cancelarEdicao = () => {\n+    setEditingItem(null);\n+    setNovoItem({\n+      tempId: '',\n+      servico_id: '',\n+      id_documento: '',\n+      qtd_fiscais: 1,\n+      quantidade: undefined,\n+      pontuacao_calculada: 0,\n+      observacoes: '',\n+    });\n+  };\n+\n+  const salvarEdicao = () => {\n+    if (!novoItem.servico_id || !novoItem.id_documento) {\n+      return;\n+    }\n+\n+    setItens(prev => prev.map(item => \n+      item.tempId === editingItem ? novoItem : item\n+    ));\n+    \n+    cancelarEdicao();\n+  };\n+\n   const totalPontos = itens.reduce((sum, item) => sum + item.pontuacao_calculada, 0);\n \n   const handleSubmit = async (e: React.FormEvent) => {\n     e.preventDefault();\n@@ -282,24 +313,113 @@\n                 </TableHeader>\n                 <TableBody>\n                   {itens.map((item) => {\n                     const servico = servicos?.find(s => s.id === item.servico_id);\n+                    const isEditing = editingItem === item.tempId;\n+                    \n                     return (\n                       <TableRow key={item.tempId}>\n-                        <TableCell>{servico?.descricao}</TableCell>\n-                        <TableCell>{item.id_documento}</TableCell>\n-                        <TableCell>{item.qtd_fiscais}</TableCell>\n-                        <TableCell>{item.quantidade || '-'}</TableCell>\n+                        <TableCell>\n+                          {isEditing ? (\n+                            <Select value={novoItem.servico_id} onValueChange={handleServicoChange}>\n+                              <SelectTrigger className=\"w-full\">\n+                                <SelectValue placeholder=\"Selecione o serviço\" />\n+                              </SelectTrigger>\n+                              <SelectContent>\n+                                {servicos?.filter(servico => servico.id && servico.id.trim() !== '').map((servico) => (\n+                                  <SelectItem key={servico.id} value={servico.id}>\n+                                    {servico.descricao}\n+                                  </SelectItem>\n+                                ))}\n+                              </SelectContent>\n+                            </Select>\n+                          ) : (\n+                            servico?.descricao\n+                          )}\n+                        </TableCell>\n+                        <TableCell>\n+                          {isEditing ? (\n+                            <Input\n+                              value={novoItem.id_documento}\n+                              onChange={(e) => setNovoItem(prev => ({ ...prev, id_documento: e.target.value }))}\n+                              placeholder=\"ID do documento\"\n+                            />\n+                          ) : (\n+                            item.id_documento\n+                          )}\n+                        </TableCell>\n+                        <TableCell>\n+                          {isEditing ? (\n+                            <Input\n+                              type=\"number\"\n+                              min=\"1\"\n+                              value={novoItem.qtd_fiscais}\n+                              onChange={(e) => handleQtdFiscaisChange(Number(e.target.value))}\n+                            />\n+                          ) : (\n+                            item.qtd_fiscais\n+                          )}\n+                        </TableCell>\n+                        <TableCell>\n+                          {isEditing ? (\n+                            <Input\n+                              type=\"number\"\n+                              step=\"0.01\"\n+                              value={novoItem.quantidade || ''}\n+                              onChange={(e) => setNovoItem(prev => ({ ...prev, quantidade: e.target.value ? Number(e.target.value) : undefined }))}\n+                              placeholder=\"Quantidade\"\n+                            />\n+                          ) : (\n+                            item.quantidade || '-'\n+                          )}\n+                        </TableCell>\n                         <TableCell>{item.pontuacao_calculada.toFixed(2)}</TableCell>\n                         <TableCell>\n-                          <Button\n-                            type=\"button\"\n-                            variant=\"ghost\"\n-                            size=\"sm\"\n-                            onClick={() => removerItem(item.tempId)}\n-                          >\n-                            <Trash2 className=\"h-4 w-4\" />\n-                          </Button>\n+                          <div className=\"flex gap-1\">\n+                            {isEditing ? (\n+                              <>\n+                                <Button\n+                                  type=\"button\"\n+                                  variant=\"ghost\"\n+                                  size=\"sm\"\n+                                  onClick={salvarEdicao}\n+                                  title=\"Salvar\"\n+                                >\n+                                  <Check className=\"h-4 w-4 text-green-600\" />\n+                                </Button>\n+                                <Button\n+                                  type=\"button\"\n+                                  variant=\"ghost\"\n+                                  size=\"sm\"\n+                                  onClick={cancelarEdicao}\n+                                  title=\"Cancelar\"\n+                                >\n+                                  <X className=\"h-4 w-4 text-red-600\" />\n+                                </Button>\n+                              </>\n+                            ) : (\n+                              <>\n+                                <Button\n+                                  type=\"button\"\n+                                  variant=\"ghost\"\n+                                  size=\"sm\"\n+                                  onClick={() => iniciarEdicao(item)}\n+                                  title=\"Editar\"\n+                                >\n+                                  <Edit className=\"h-4 w-4\" />\n+                                </Button>\n+                                <Button\n+                                  type=\"button\"\n+                                  variant=\"ghost\"\n+                                  size=\"sm\"\n+                                  onClick={() => removerItem(item.tempId)}\n+                                  title=\"Excluir\"\n+                                >\n+                                  <Trash2 className=\"h-4 w-4\" />\n+                                </Button>\n+                              </>\n+                            )}\n+                          </div>\n                         </TableCell>\n                       </TableRow>\n                     );\n                   })}\n"
                },
                {
                    "date": 1757096854107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,11 +168,14 @@\n   }\n \n   return (\n     <div className=\"space-y-6\">\n-      <div>\n-        <h1 className=\"text-3xl font-bold\">Criar nova PRT</h1>\n-        <p className=\"text-muted-foreground\">Registro de Produtividade de Fiscalização</p>\n+      <div className=\"flex items-center gap-4\">\n+        <img src=\"/logo.svg\" alt=\"ProdFisco Logo\" className=\"w-12 h-12\" />\n+        <div>\n+          <h1 className=\"text-3xl font-bold\">Criar nova PRT</h1>\n+          <p className=\"text-muted-foreground\">Registro de Produtividade Fiscal</p>\n+        </div>\n       </div>\n \n       <form onSubmit={handleSubmit} className=\"space-y-6\">\n         <Card>\n"
                }
            ],
            "date": 1757095833899,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Trash2, Plus } from 'lucide-react';\nimport { useServicos } from '@/hooks/useServicos';\nimport { useCreateRegistro, ItemServico } from '@/hooks/useRegistros';\n\ninterface FormItem {\n  tempId: string;\n  servico_id: string;\n  id_documento: string;\n  qtd_fiscais: number;\n  quantidade?: number;\n  pontuacao_calculada: number;\n  observacoes?: string;\n}\n\nexport default function NovaPRT() {\n  const navigate = useNavigate();\n  const [competencia, setCompetencia] = useState('');\n  const [anotacoes, setAnotacoes] = useState('');\n  const [itens, setItens] = useState<FormItem[]>([]);\n  const [novoItem, setNovoItem] = useState<FormItem>({\n    tempId: '',\n    servico_id: '',\n    id_documento: '',\n    qtd_fiscais: 1,\n    quantidade: undefined,\n    pontuacao_calculada: 0,\n    observacoes: '',\n  });\n\n  const { data: servicos, isLoading: loadingServicos } = useServicos();\n  const createRegistro = useCreateRegistro();\n\n  // Gerar competência atual por padrão\n  useEffect(() => {\n    const now = new Date();\n    const mes = String(now.getMonth() + 1).padStart(2, '0');\n    const ano = String(now.getFullYear());\n    setCompetencia(`${mes}/${ano}`);\n  }, []);\n\n  const calcularPontuacao = (servicoId: string, qtdFiscais: number) => {\n    const servico = servicos?.find(s => s.id === servicoId);\n    if (!servico) return 0;\n    return Number((servico.pontuacao_base / qtdFiscais).toFixed(2));\n  };\n\n  const handleServicoChange = (servicoId: string) => {\n    const pontuacao = calcularPontuacao(servicoId, novoItem.qtd_fiscais);\n    setNovoItem(prev => ({\n      ...prev,\n      servico_id: servicoId,\n      pontuacao_calculada: pontuacao,\n    }));\n  };\n\n  const handleQtdFiscaisChange = (qtd: number) => {\n    const pontuacao = calcularPontuacao(novoItem.servico_id, qtd);\n    setNovoItem(prev => ({\n      ...prev,\n      qtd_fiscais: qtd,\n      pontuacao_calculada: pontuacao,\n    }));\n  };\n\n  const adicionarItem = () => {\n    if (!novoItem.servico_id || !novoItem.id_documento) {\n      alert('Preencha os campos obrigatórios');\n      return;\n    }\n\n    const item: FormItem = {\n      ...novoItem,\n      tempId: Date.now().toString(),\n    };\n\n    setItens(prev => [...prev, item]);\n    setNovoItem({\n      tempId: '',\n      servico_id: '',\n      id_documento: '',\n      qtd_fiscais: 1,\n      quantidade: undefined,\n      pontuacao_calculada: 0,\n      observacoes: '',\n    });\n  };\n\n  const removerItem = (tempId: string) => {\n    setItens(prev => prev.filter(item => item.tempId !== tempId));\n  };\n\n  const totalPontos = itens.reduce((sum, item) => sum + item.pontuacao_calculada, 0);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (itens.length === 0) {\n      alert('Adicione pelo menos um item de serviço');\n      return;\n    }\n\n    const itensServico: ItemServico[] = itens.map(item => ({\n      servico_id: item.servico_id,\n      id_documento: item.id_documento,\n      qtd_fiscais: item.qtd_fiscais,\n      quantidade: item.quantidade,\n      pontuacao_calculada: item.pontuacao_calculada,\n      observacoes: item.observacoes,\n    }));\n\n    try {\n      await createRegistro.mutateAsync({\n        competencia,\n        total_pontos: totalPontos,\n        situacao: 'ativo',\n        anotacoes,\n        itens: itensServico,\n      });\n      \n      navigate('/lista');\n    } catch (error) {\n      console.error('Erro ao salvar:', error);\n    }\n  };\n\n  if (loadingServicos) {\n    return <div>Carregando serviços...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Criar nova PRT</h1>\n        <p className=\"text-muted-foreground\">Registro de Produtividade de Fiscalização</p>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Informações Gerais</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"competencia\">Competência</Label>\n                <Input\n                  id=\"competencia\"\n                  value={competencia}\n                  onChange={(e) => setCompetencia(e.target.value)}\n                  placeholder=\"MM/AAAA\"\n                  required\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"anotacoes\">Anotações</Label>\n              <Textarea\n                id=\"anotacoes\"\n                value={anotacoes}\n                onChange={(e) => setAnotacoes(e.target.value)}\n                placeholder=\"Observações gerais sobre este registro...\"\n                rows={3}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Adicionar Serviço</CardTitle>\n            <CardDescription>Complete os campos abaixo para adicionar um item de serviço</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-12 gap-4\">\n              <div className=\"md:col-span-5\">\n                <Label>Tipo de Serviço *</Label>\n                <Select value={novoItem.servico_id} onValueChange={handleServicoChange}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione o serviço\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-popover\">\n                    {servicos?.filter(servico => servico.id && servico.id.trim() !== '').map((servico) => (\n                      <SelectItem key={servico.id} value={servico.id}>\n                        {servico.descricao}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"md:col-span-3\">\n                <Label htmlFor=\"id_documento\">ID Documento *</Label>\n                <Input\n                  id=\"id_documento\"\n                  value={novoItem.id_documento}\n                  onChange={(e) => setNovoItem(prev => ({ ...prev, id_documento: e.target.value }))}\n                  placeholder=\"ID do documento\"\n                />\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"qtd_fiscais\">Qtd. Fiscais *</Label>\n                <Input\n                  id=\"qtd_fiscais\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={novoItem.qtd_fiscais}\n                  onChange={(e) => handleQtdFiscaisChange(Number(e.target.value))}\n                />\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"quantidade\">Quantidade</Label>\n                <Input\n                  id=\"quantidade\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={novoItem.quantidade || ''}\n                  onChange={(e) => setNovoItem(prev => ({ \n                    ...prev, \n                    quantidade: e.target.value ? Number(e.target.value) : undefined \n                  }))}\n                  placeholder=\"Opcional\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"observacoes\">Observações</Label>\n                <Input\n                  id=\"observacoes\"\n                  value={novoItem.observacoes || ''}\n                  onChange={(e) => setNovoItem(prev => ({ ...prev, observacoes: e.target.value }))}\n                  placeholder=\"Observações sobre este item\"\n                />\n              </div>\n\n              <div>\n                <Label>Pontuação Calculada</Label>\n                <Input\n                  value={novoItem.pontuacao_calculada.toFixed(2)}\n                  readOnly\n                  className=\"bg-muted\"\n                />\n              </div>\n            </div>\n\n            <Button type=\"button\" onClick={adicionarItem} className=\"w-full\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Adicionar Item\n            </Button>\n          </CardContent>\n        </Card>\n\n        {itens.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Itens Adicionados</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Serviço</TableHead>\n                    <TableHead>ID Documento</TableHead>\n                    <TableHead>Qtd. Fiscais</TableHead>\n                    <TableHead>Quantidade</TableHead>\n                    <TableHead>Pontuação</TableHead>\n                    <TableHead>Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {itens.map((item) => {\n                    const servico = servicos?.find(s => s.id === item.servico_id);\n                    return (\n                      <TableRow key={item.tempId}>\n                        <TableCell>{servico?.descricao}</TableCell>\n                        <TableCell>{item.id_documento}</TableCell>\n                        <TableCell>{item.qtd_fiscais}</TableCell>\n                        <TableCell>{item.quantidade || '-'}</TableCell>\n                        <TableCell>{item.pontuacao_calculada.toFixed(2)}</TableCell>\n                        <TableCell>\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removerItem(item.tempId)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n\n              <div className=\"mt-4 p-4 bg-muted rounded-lg\">\n                <div className=\"flex justify-between items-center text-lg font-semibold\">\n                  <span>Total de Pontos:</span>\n                  <span>{totalPontos.toFixed(2)}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <div className=\"flex gap-4 justify-end\">\n          <Button type=\"button\" variant=\"outline\" onClick={() => navigate('/lista')}>\n            Cancelar\n          </Button>\n          <Button type=\"submit\" disabled={createRegistro.isPending}>\n            {createRegistro.isPending ? 'Salvando...' : 'Salvar PRT'}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}"
        }
    ]
}