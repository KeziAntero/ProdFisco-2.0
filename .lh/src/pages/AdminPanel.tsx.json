{
    "sourceFile": "src/pages/AdminPanel.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757097391507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757097391507,
            "name": "Commit-0",
            "content": "import { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Printer, Download, Users, TrendingUp, Calendar } from 'lucide-react';\r\nimport { useAdminRegistros } from '@/hooks/useAdminRegistros';\r\nimport { useAuth } from '@/hooks/useAuth';\r\nimport { format } from 'date-fns';\r\nimport { ptBR } from 'date-fns/locale';\r\nimport { generateProductivityReport } from '@/utils/pdfGenerator';\r\n\r\nexport default function AdminPanel() {\r\n  const { profile } = useAuth();\r\n  const [mes, setMes] = useState('all');\r\n  const [ano, setAno] = useState(new Date().getFullYear().toString());\r\n  const [fiscalFiltro, setFiscalFiltro] = useState('all');\r\n  \r\n  const { data: registros, isLoading } = useAdminRegistros({ mes, ano });\r\n\r\n  const meses = [\r\n    { value: '1', label: 'Janeiro' },\r\n    { value: '2', label: 'Fevereiro' },\r\n    { value: '3', label: 'Março' },\r\n    { value: '4', label: 'Abril' },\r\n    { value: '5', label: 'Maio' },\r\n    { value: '6', label: 'Junho' },\r\n    { value: '7', label: 'Julho' },\r\n    { value: '8', label: 'Agosto' },\r\n    { value: '9', label: 'Setembro' },\r\n    { value: '10', label: 'Outubro' },\r\n    { value: '11', label: 'Novembro' },\r\n    { value: '12', label: 'Dezembro' },\r\n  ];\r\n\r\n  const anos = Array.from({ length: 10 }, (_, i) => {\r\n    const ano = new Date().getFullYear() - 5 + i;\r\n    return { value: ano.toString(), label: ano.toString() };\r\n  });\r\n\r\n  // Obter lista única de fiscais\r\n  const fiscais = registros ? \r\n    Array.from(new Set(registros.map(r => r.user_id)))\r\n      .map(userId => {\r\n        const registro = registros.find(r => r.user_id === userId);\r\n        return {\r\n          id: userId,\r\n          nome: registro?.user?.nome || 'Usuário',\r\n          email: registro?.user?.email || 'email@exemplo.com'\r\n        };\r\n      }) : [];\r\n\r\n  // Filtrar registros por fiscal se selecionado\r\n  const registrosFiltrados = registros?.filter(registro => \r\n    fiscalFiltro === 'all' || registro.user_id === fiscalFiltro\r\n  ) || [];\r\n\r\n  // Calcular estatísticas\r\n  const totalRegistros = registrosFiltrados.length;\r\n  const totalPontos = registrosFiltrados.reduce((sum, r) => sum + r.total_pontos, 0);\r\n  const mediaPontos = totalRegistros > 0 ? totalPontos / totalRegistros : 0;\r\n  const fiscaisAtivos = new Set(registrosFiltrados.map(r => r.user_id)).size;\r\n\r\n  const handlePrint = (registro: any) => {\r\n    if (!profile) {\r\n      alert('Perfil do usuário não encontrado!');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      generateProductivityReport(registro, profile);\r\n    } catch (error) {\r\n      console.error('Erro ao gerar PDF:', error);\r\n      alert('Erro ao gerar o relatório PDF!');\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div>Carregando dados...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center gap-4\">\r\n        <img src=\"/logo.svg\" alt=\"ProdFisco Logo\" className=\"w-12 h-12\" />\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">Painel Administrativo</h1>\r\n          <p className=\"text-muted-foreground\">Relatórios de produtividade de todos os fiscais</p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Estatísticas */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total de Registros</CardTitle>\r\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{totalRegistros}</div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total de Pontos</CardTitle>\r\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{totalPontos.toFixed(2)}</div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Média de Pontos</CardTitle>\r\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{mediaPontos.toFixed(2)}</div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Fiscais Ativos</CardTitle>\r\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{fiscaisAtivos}</div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Filtros */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Filtros</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n            <div>\r\n              <Label>Mês</Label>\r\n              <Select value={mes} onValueChange={setMes}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Selecione o mês\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">Todos os meses</SelectItem>\r\n                  {meses.map((mes) => (\r\n                    <SelectItem key={mes.value} value={mes.value}>\r\n                      {mes.label}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div>\r\n              <Label>Ano</Label>\r\n              <Select value={ano} onValueChange={setAno}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Selecione o ano\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {anos.map((ano) => (\r\n                    <SelectItem key={ano.value} value={ano.value}>\r\n                      {ano.label}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div>\r\n              <Label>Fiscal</Label>\r\n              <Select value={fiscalFiltro} onValueChange={setFiscalFiltro}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Selecione o fiscal\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">Todos os fiscais</SelectItem>\r\n                  {fiscais.map((fiscal) => (\r\n                    <SelectItem key={fiscal.id} value={fiscal.id}>\r\n                      {fiscal.nome} ({fiscal.email})\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div className=\"flex items-end\">\r\n              <Button \r\n                onClick={() => {\r\n                  setMes('all');\r\n                  setAno(new Date().getFullYear().toString());\r\n                  setFiscalFiltro('all');\r\n                }}\r\n                variant=\"outline\"\r\n                className=\"w-full\"\r\n              >\r\n                Limpar Filtros\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Tabela de Registros */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Registros de Produtividade</CardTitle>\r\n          <CardDescription>\r\n            {fiscalFiltro === 'all' \r\n              ? `Mostrando todos os registros (${totalRegistros} encontrados)`\r\n              : `Mostrando registros do fiscal selecionado (${totalRegistros} encontrados)`\r\n            }\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {registrosFiltrados.length > 0 ? (\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>N°</TableHead>\r\n                  <TableHead>Fiscal</TableHead>\r\n                  <TableHead>Email</TableHead>\r\n                  <TableHead>Competência</TableHead>\r\n                  <TableHead>Data de Criação</TableHead>\r\n                  <TableHead>Total de Pontos</TableHead>\r\n                  <TableHead>Ações</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {registrosFiltrados.map((registro) => (\r\n                  <TableRow key={registro.id}>\r\n                    <TableCell>\r\n                      <Badge variant=\"outline\">#{registro.numero_registro}</Badge>\r\n                    </TableCell>\r\n                    <TableCell className=\"font-medium\">\r\n                      {registro.user?.nome || 'Usuário'}\r\n                    </TableCell>\r\n                    <TableCell>{registro.user?.email}</TableCell>\r\n                    <TableCell>{registro.competencia}</TableCell>\r\n                    <TableCell>\r\n                      {format(new Date(registro.data_criacao!), 'dd/MM/yyyy HH:mm', { locale: ptBR })}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Badge variant=\"secondary\">\r\n                        {registro.total_pontos.toFixed(2)} pts\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex gap-2\">\r\n                        <Button\r\n                          variant=\"ghost\"\r\n                          size=\"sm\"\r\n                          onClick={() => handlePrint(registro)}\r\n                          title=\"Imprimir Relatório\"\r\n                        >\r\n                          <Printer className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          ) : (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              Nenhum registro encontrado para os filtros selecionados.\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}