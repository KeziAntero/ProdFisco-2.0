{
    "sourceFile": "src/pages/ListaProdutividade.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757096854045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757096854045,
            "name": "Commit-0",
            "content": "import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Plus, Printer, Edit, Trash2 } from 'lucide-react';\nimport { useRegistros, useDeleteRegistro } from '@/hooks/useRegistros';\nimport { useAuth } from '@/hooks/useAuth';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport { generateProductivityReport } from '@/utils/pdfGenerator';\n\nexport default function ListaProdutividade() {\n  const navigate = useNavigate();\n  const { profile } = useAuth();\n  const [mes, setMes] = useState('all');\n  const [ano, setAno] = useState(new Date().getFullYear().toString());\n  \n  const { data: registros, isLoading } = useRegistros({ mes, ano });\n  const deleteRegistro = useDeleteRegistro();\n\n  const meses = [\n    { value: '1', label: 'Janeiro' },\n    { value: '2', label: 'Fevereiro' },\n    { value: '3', label: 'Março' },\n    { value: '4', label: 'Abril' },\n    { value: '5', label: 'Maio' },\n    { value: '6', label: 'Junho' },\n    { value: '7', label: 'Julho' },\n    { value: '8', label: 'Agosto' },\n    { value: '9', label: 'Setembro' },\n    { value: '10', label: 'Outubro' },\n    { value: '11', label: 'Novembro' },\n    { value: '12', label: 'Dezembro' },\n  ];\n\n  const anos = Array.from({ length: 10 }, (_, i) => {\n    const ano = new Date().getFullYear() - 5 + i;\n    return { value: ano.toString(), label: ano.toString() };\n  });\n\n  const handleDelete = async (id: string) => {\n    if (window.confirm('Tem certeza que deseja excluir este registro?')) {\n      await deleteRegistro.mutateAsync(id);\n    }\n  };\n\n  const handlePrint = (registro: any) => {\n    if (!profile) {\n      alert('Perfil do usuário não encontrado!');\n      return;\n    }\n    \n    try {\n      generateProductivityReport(registro, profile);\n    } catch (error) {\n      console.error('Erro ao gerar PDF:', error);\n      alert('Erro ao gerar o relatório PDF!');\n    }\n  };\n\n  if (isLoading) {\n    return <div>Carregando registros...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center gap-4\">\n          <img src=\"/logo.svg\" alt=\"ProdFisco Logo\" className=\"w-12 h-12\" />\n          <div>\n            <h1 className=\"text-3xl font-bold\">Lista de Produtividade</h1>\n            <p className=\"text-muted-foreground\">Histórico de registros de produtividade</p>\n          </div>\n        </div>\n        <Button onClick={() => navigate('/nova-prt')}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Nova PRT\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Filtros</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label>Mês</Label>\n              <Select value={mes} onValueChange={setMes}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos os meses\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-popover\">\n                  <SelectItem value=\"all\">Todos os meses</SelectItem>\n                  {meses.map((m) => (\n                    <SelectItem key={m.value} value={m.value}>\n                      {m.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label>Ano</Label>\n              <Select value={ano} onValueChange={setAno}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-popover\">\n                  {anos.map((a) => (\n                    <SelectItem key={a.value} value={a.value}>\n                      {a.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-end\">\n              <Button className=\"w-full\">\n                Buscar\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Registros Encontrados</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {registros && registros.length > 0 ? (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>N°</TableHead>\n                  <TableHead>Competência</TableHead>\n                  <TableHead>Data de Criação</TableHead>\n                  <TableHead>Total de Pontos</TableHead>\n                  <TableHead>Ações</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {registros.map((registro) => (\n                  <TableRow key={registro.id}>\n                    <TableCell>{registro.numero_registro}</TableCell>\n                    <TableCell>{registro.competencia}</TableCell>\n                    <TableCell>\n                      {format(new Date(registro.data_criacao!), 'dd/MM/yyyy HH:mm', { locale: ptBR })}\n                    </TableCell>\n                    <TableCell>{registro.total_pontos.toFixed(2)}</TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handlePrint(registro)}\n                          title=\"Imprimir\"\n                        >\n                          <Printer className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => navigate(`/editar-prt/${registro.id}`)}\n                          title=\"Editar\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(registro.id!)}\n                          title=\"Excluir\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              Nenhum registro encontrado para os filtros selecionados.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}"
        }
    ]
}